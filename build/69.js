webpackJsonp([69],{1774:function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),t.d(n,"AddonModLessonPlayerPageModule",function(){return d});var o=t(0),s=t(3),i=t(2),a=t(16),r=t(15),l=t(1890),c=this&&this.__decorate||function(e,n,t,o){var s,i=arguments.length,a=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,n,t,o);else for(var r=e.length-1;r>=0;r--)(s=e[r])&&(a=(i<3?s(a):i>3?s(n,t,a):s(n,t))||a);return i>3&&a&&Object.defineProperty(n,t,a),a},d=function(){function e(){}return e=c([Object(o.I)({declarations:[l.a],imports:[a.a,r.a,s.l.forChild(l.a),i.b.forChild()]})],e)}()},1890:function(e,n,t){"use strict";t.d(n,"a",function(){return D});var o=t(0),s=t(19),i=t(3),a=t(2),r=t(11),l=t(12),c=t(6),d=t(4),m=t(52),u=t(9),p=t(22),f=t(44),g=t(7),h=t(93),v=t(189),w=t(247),x=t(889),b=this&&this.__decorate||function(e,n,t,o){var s,i=arguments.length,a=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,t):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(e,n,t,o);else for(var r=e.length-1;r>=0;r--)(s=e[r])&&(a=(i<3?s(a):i>3?s(n,t,a):s(n,t))||a);return i>3&&a&&Object.defineProperty(n,t,a),a},y=this&&this.__metadata||function(e,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,n)},D=function(){function e(e,n,t,o,s,i,a,r,l,c,d,m,u,p,f,g,v,w,x,b){this.navParams=e,this.translate=t,this.eventsProvider=o,this.sitesProvider=s,this.syncProvider=i,this.domUtils=a,this.timeUtils=l,this.lessonProvider=c,this.lessonHelper=d,this.lessonSync=m,this.lessonOfflineProvider=u,this.cdr=p,this.navCtrl=g,this.appProvider=v,this.utils=w,this.urlUtils=x,this.fb=b,this.component=h.a.COMPONENT,this.LESSON_EOL=h.a.LESSON_EOL,this.forceLeave=!1,this.lessonId=e.get("lessonId"),this.courseId=e.get("courseId"),this.password=e.get("password"),this.review=!!e.get("review"),this.currentPage=e.get("pageId"),this.syncProvider.blockOperation(this.component,this.lessonId),this.menuModal=f.create("AddonModLessonMenuModalPage",{page:this})}return e.prototype.ngOnInit=function(){var e=this;this.fetchLessonData().then(function(n){n&&e.lessonSync.deleteRetakeFinishedInSync(e.lessonId)}).finally(function(){e.loaded=!0})},e.prototype.ngOnDestroy=function(){this.syncProvider.unblockOperation(this.component,this.lessonId)},e.prototype.ionViewCanLeave=function(){return!!this.forceLeave||(!this.question||this.eolData||this.processData||!this.originalData||this.utils.basicLeftCompare(this.questionForm.getRawValue(),this.originalData,3)?Promise.resolve():this.domUtils.showConfirm(this.translate.instant("core.confirmcanceledit")))},e.prototype.buttonClicked=function(e){this.processPage(e)},e.prototype.callFunction=function(e,n,t,o){var s=this;return e.apply(e,n).catch(function(i){return s.offline||s.review||!s.lessonProvider.isLessonOffline(s.lesson)||s.utils.isWebServiceError(i)?Promise.reject(i):(s.offline=!0,s.lessonProvider.getPagesPossibleJumps(s.lesson.id,!0).then(function(i){return s.jumps=i,n[t]=!0,void 0!==o&&(n[o]=s.jumps),e.apply(e,n)}))})},e.prototype.changePage=function(e,n){var t=this;(n||this.eolData||this.currentPage!=e)&&(this.loaded=!0,this.messages=[],this.loadPage(e).catch(function(e){t.domUtils.showErrorModalDefault(e,"Error loading page")}).finally(function(){t.loaded=!0}))},e.prototype.fetchLessonData=function(){var e=this;return this.lessonSync.waitForSync(this.lessonId).then(function(){return e.lessonProvider.getLessonById(e.courseId,e.lessonId)}).then(function(n){return e.lesson=n,e.title=e.lesson.name,e.lessonOfflineProvider.hasOfflineData(e.lessonId)}).then(function(n){return e.offline=n,n||e.appProvider.isOnline()||!e.lessonProvider.isLessonOffline(e.lesson)||e.review||(e.offline=!0),e.callFunction(e.lessonProvider.getAccessInformation.bind(e.lessonProvider),[e.lesson.id,e.offline,!0],1)}).then(function(n){var t=[];return e.accessInfo=n,e.canManage=n.canmanage,e.retake=n.attemptscount,e.showRetake=!e.currentPage&&e.retake>0,n.preventaccessreasons&&n.preventaccessreasons.length&&(!e.password||n.preventaccessreasons.length>1||!e.lessonProvider.isPasswordProtected(n))?Promise.reject(n.preventaccessreasons[0].message):e.review&&e.navParams.get("retake")!=n.attemptscount-1?Promise.reject(e.translate.instant("addon.mod_lesson.errorreviewretakenotlast")):(e.password&&t.push(e.callFunction(e.lessonProvider.getLessonWithPassword.bind(e.lessonProvider),[e.lesson.id,e.password,!0,e.offline,!0],3).then(function(n){e.lesson=n})),e.offline&&t.push(e.lessonProvider.getPagesPossibleJumps(e.lesson.id,!0).then(function(n){e.jumps=n})),Promise.all(t))}).then(function(){return e.mediaFile=e.lesson.mediafiles&&e.lesson.mediafiles[0],e.lessonWidth=e.lesson.slideshow?e.domUtils.formatPixelsSize(e.lesson.mediawidth):"",e.lessonHeight=e.lesson.slideshow?e.domUtils.formatPixelsSize(e.lesson.mediaheight):"",e.launchRetake(e.currentPage)}).then(function(){return!0}).catch(function(n){return(e.review&&e.navParams.get("retake")&&e.utils.isWebServiceError(n)?e.lessonSync.deleteRetakeFinishedInSync(e.lessonId):Promise.resolve()).then(function(){return e.domUtils.showErrorModalDefault(n,"core.course.errorgetmodule",!0),e.forceLeave=!0,e.navCtrl.pop(),!1})})},e.prototype.finishRetake=function(e){var n=this;return this.messages=[],(this.offline&&this.appProvider.isOnline()?this.lessonSync.syncLesson(this.lesson.id,!0,!0).then(function(e){if(e.warnings&&e.warnings.length){var t=e.warnings[0];return n.lessonProvider.getAccessInformation(n.lesson.id).then(function(e){if(e.attemptscount!=n.accessInfo.attemptscount)return n.forceLeave=!0,n.navCtrl.pop(),Promise.reject(t);n.offline=!1,n.domUtils.showErrorModal(t)})}n.offline=!1},function(){}):Promise.resolve()).then(function(){var t=[n.lesson,n.courseId,n.password,e,n.review,n.offline,n.accessInfo];return n.callFunction(n.lessonProvider.finishRetake.bind(n.lessonProvider),t,5)}).then(function(e){if(n.title=n.lesson.name,n.eolData=e.data,n.messages=n.messages.concat(e.messages),n.processData=void 0,n.eolData&&n.eolData.activitylink&&(n.eolData.activitylink.value=n.lessonHelper.formatActivityLink(n.eolData.activitylink.value)),n.eolData&&n.eolData.reviewlesson){var t=n.urlUtils.extractUrlParams(n.eolData.reviewlesson.value);t&&t.pageid?n.eolData.reviewlesson.pageid=t.pageid:delete n.eolData.reviewlesson}})},e.prototype.jumpToPage=function(e){return 0===e?(this.forceLeave=!0,this.navCtrl.pop(),Promise.resolve()):e==h.a.LESSON_EOL?this.finishRetake():(this.messages=[],this.loadPage(e))},e.prototype.launchRetake=function(e){var n=this;return(this.review?Promise.resolve({}):this.offline?this.lessonOfflineProvider.hasFinishedRetake(this.lesson.id).then(function(n){return n&&(e=h.a.LESSON_EOL),{}}):this.lessonProvider.launchRetake(this.lesson.id,this.password,e)).then(function(t){if(n.currentPage=e||n.accessInfo.firstpageid,n.messages=t.messages||[],n.lesson.timelimit&&!n.accessInfo.canmanage)return n.lessonProvider.getTimers(n.lesson.id,!1,!0).then(function(e){n.endTime=e[e.length-1].starttime+n.lesson.timelimit})}).then(function(){return n.loadPage(n.currentPage)})},e.prototype.loadMenu=function(){var e=this;if(!this.loadingMenu){this.loadingMenu=!0;var n=[this.lessonId,this.password,this.offline,!0];return this.callFunction(this.lessonProvider.getPages.bind(this.lessonProvider),n,2).then(function(n){e.lessonPages=n.map(function(e){return e.page})}).catch(function(n){e.domUtils.showErrorModalDefault(n,"Error loading menu.")}).finally(function(){e.loadingMenu=!1})}},e.prototype.loadPage=function(e){var n=this;if(e==h.a.LESSON_EOL)return this.finishRetake();var t=[this.lesson,e,this.password,this.review,!0,this.offline,!0,this.accessInfo,this.jumps];return this.callFunction(this.lessonProvider.getPageData.bind(this.lessonProvider),t,5,8).then(function(t){if(t.newpageid==h.a.LESSON_EOL)return n.finishRetake();n.pageData=t,n.title=t.page.title,n.pageContent=n.lessonHelper.getPageContentsFromPageData(t),n.loaded=!0,n.currentPage=e,n.messages=n.messages.concat(t.messages),n.eolData=n.processData=void 0,n.lessonProvider.isQuestionPage(t.page.type)?(n.questionForm=n.fb.group({}),n.pageButtons=[],n.question=n.lessonHelper.getQuestionFromPageData(n.questionForm,t),n.originalData=n.questionForm.getRawValue()):(n.pageButtons=n.lessonHelper.getPageButtonsFromHtml(t.pagecontent),n.question=void 0,n.originalData=void 0),t.displaymenu&&!n.displayMenu&&n.loadMenu(),n.displayMenu=!!t.displaymenu,n.firstPageLoaded?n.showRetake=!1:n.firstPageLoaded=!0})},e.prototype.processPage=function(e){var n=this;this.loaded=!1;var t=[this.lesson,this.courseId,this.pageData,e,this.password,this.review,this.offline,this.accessInfo,this.jumps];return this.callFunction(this.lessonProvider.processPage.bind(this.lessonProvider),t,6,8).then(function(e){if(!n.offline&&!n.review&&n.lessonProvider.isLessonOffline(n.lesson)){var t=n.accessInfo.attemptscount;n.lessonProvider.isQuestionPage(n.pageData.page.type)?n.lessonProvider.getQuestionsAttemptsOnline(n.lessonId,t,!1,void 0,!1,!0):n.lessonProvider.getContentPagesViewedOnline(n.lessonId,t,!1,!0)}if(e.nodefaultresponse||e.inmediatejump)return n.jumpToPage(e.newpageid);e.feedback=n.lessonHelper.removeQuestionFromFeedback(e.feedback),n.messages=e.messages,n.processData=e,n.processData.buttons=[],!n.lesson.review||e.correctanswer||e.noanswer||e.isessayquestion||e.maxattemptsreached||e.reviewmode||n.processData.buttons.push({label:"addon.mod_lesson.reviewquestionback",pageId:n.currentPage}),n.processData.buttons.push(!n.lesson.review||e.correctanswer||e.noanswer||e.isessayquestion||e.maxattemptsreached?{label:"addon.mod_lesson.continue",pageId:e.newpageid}:{label:"addon.mod_lesson.reviewquestioncontinue",pageId:e.newpageid})}).catch(function(e){n.domUtils.showErrorModalDefault(e,"Error processing page")}).finally(function(){n.loaded=!0})},e.prototype.reviewLesson=function(e){var n=this;this.loaded=!1,this.review=!0,this.offline=!1,this.loadPage(e).catch(function(e){n.domUtils.showErrorModalDefault(e,"Error loading page")}).finally(function(){n.loaded=!0})},e.prototype.submitQuestion=function(){var e=this;this.loaded=!1,this.lessonHelper.prepareQuestionData(this.question,this.questionForm.getRawValue()).then(function(n){return e.processPage(n)}).finally(function(){e.loaded=!0})},e.prototype.timeUp=function(){var e=this;this.endTime=void 0,this.loaded=!1,this.finishRetake(!0).catch(function(n){e.domUtils.showErrorModalDefault(n,"Error finishing attempt")}).finally(function(){e.loaded=!0})},b([Object(o._9)(i.f),y("design:type",i.f)],e.prototype,"content",void 0),e=b([Object(o.m)({selector:"page-addon-mod-lesson-player",template:'<ion-header>\n    <ion-navbar>\n        <ion-title><core-format-text [text]="title"></core-format-text></ion-title>\n\n        <ion-buttons end>\n            <button *ngIf="displayMenu || mediaFile" ion-button icon-only [attr.aria-label]="\'addon.mod_lesson.lessonmenu\' | translate" (click)="menuModal.present()">\n                <ion-icon name="bookmark"></ion-icon>\n            </button>\n        </ion-buttons>\n    </ion-navbar>\n</ion-header>\n<ion-content>\n    <core-loading [hideUntil]="loaded">\n        \x3c!-- Info messages. Only show the first one. --\x3e\n        <div class="core-info-card" icon-start *ngIf="lesson && messages && messages.length">\n            <ion-icon name="information-circle"></ion-icon>\n            <core-format-text [component]="component" [componentId]="lesson.coursemodule" [text]="messages[0].message"></core-format-text>\n        </div>\n\n        <div *ngIf="lesson" [ngClass]=\'{"addon-mod_lesson-slideshow": lesson.slideshow}\' [ngStyle]="{\'width\': lessonWidth, \'height\': lessonHeight}">\n\n            <core-timer *ngIf="endTime" [endTime]="endTime" (finished)="timeUp()" [timerText]="\'addon.mod_lesson.timeremaining\' | translate"></core-timer>\n\n            \x3c!-- Retake and ongoing score. --\x3e\n            <ion-item text-wrap *ngIf="showRetake && !eolData && !processData">\n                <p>{{ \'addon.mod_lesson.attempt\' | translate:{$a: retake} }}</p>\n            </ion-item>\n            <ion-item text-wrap *ngIf="pageData && pageData.ongoingscore && !eolData && !processData" class="addon-mod_lesson-ongoingscore">\n                <core-format-text [component]="component" [componentId]="lesson.coursemodule" [text]="pageData.ongoingscore"></core-format-text>\n            </ion-item>\n\n            \x3c!-- Page content. --\x3e\n            <ion-card *ngIf="!eolData && !processData">\n                \x3c!-- Content page. --\x3e\n                <ion-item text-wrap *ngIf="!question">\n                    <core-format-text [component]="component" [componentId]="lesson.coursemodule" [text]="pageContent"></core-format-text>\n                </ion-item>\n\n                \x3c!-- Question page. --\x3e\n                <form *ngIf="question" ion-list [formGroup]="questionForm">\n                    <ion-item-divider text-wrap color="light">\n                        <core-format-text [component]="component" [componentId]="lesson.coursemodule" [text]="pageContent"></core-format-text>\n                    </ion-item-divider>\n\n                    <input *ngFor="let input of question.hiddenInputs" type="hidden" [name]="input.name" [value]="input.value" />\n\n                    \x3c!-- Render a different input depending on the type of the question. --\x3e\n                    <ng-container [ngSwitch]="question.template">\n\n                        \x3c!-- Short answer. --\x3e\n                        <ng-container *ngSwitchCase="\'shortanswer\'">\n                            <ion-input padding-left [type]="question.input.type" placeholder="{{ \'addon.mod_lesson.youranswer\' | translate }}" [id]="question.input.id" [formControlName]="question.input.name" autocorrect="off" [maxlength]="question.input.maxlength">\n                            </ion-input>\n                        </ng-container>\n\n                        \x3c!-- Essay. --\x3e\n                        <ng-container *ngSwitchCase="\'essay\'">\n                            <ion-item *ngIf="question.textarea">\n                                <core-rich-text-editor item-content placeholder="{{ \'addon.mod_lesson.youranswer\' | translate }}" [control]="question.control" [component]="component" [componentId]="lesson.coursemodule"></core-rich-text-editor>\n                            </ion-item>\n                            <ion-item text-wrap *ngIf="!question.textarea && question.useranswer">\n                                <p class="item-heading">{{ \'addon.mod_lesson.youranswer\' | translate }}</p>\n                                <p><core-format-text [component]="component" [componentId]="lesson.coursemodule" [text]="question.useranswer"></core-format-text></p>\n                            </ion-item>\n                        </ng-container>\n\n                        \x3c!-- Multichoice. --\x3e\n                        <ng-container *ngSwitchCase="\'multichoice\'">\n                            \x3c!-- Single choice. --\x3e\n                            <div *ngIf="!question.multi" radio-group [formControlName]="question.controlName">\n                                <ion-item text-wrap *ngFor="let option of question.options">\n                                    <ion-label>\n                                        <core-format-text [component]="component" [componentId]="lesson.coursemodule" [text]="option.text"></core-format-text>\n                                    </ion-label>\n                                    <ion-radio [id]="option.id" [value]="option.value" [disabled]="option.disabled"></ion-radio>\n                                </ion-item>\n                            </div>\n\n                            \x3c!-- Multiple choice. --\x3e\n                            <ng-container *ngIf="question.multi">\n                                <ion-item text-wrap *ngFor="let option of question.options">\n                                    <ion-label>\n                                        <core-format-text [component]="component" [componentId]="lesson.coursemodule" [text]="option.text"></core-format-text>\n                                    </ion-label>\n                                    <ion-checkbox [id]="option.id" [formControlName]="option.name" item-end></ion-checkbox>\n                                </ion-item>\n                            </ng-container>\n                        </ng-container>\n\n                        \x3c!-- Matching. --\x3e\n                        <ng-container *ngSwitchCase="\'matching\'">\n                            <ion-item text-wrap *ngFor="let row of question.rows">\n                                <ion-grid item-content>\n                                    <ion-row>\n                                        <ion-col>\n                                            <p><core-format-text id="addon-mod_lesson-matching-{{row.id}}" [component]="component" [componentId]="lesson.coursemodule" [text]="row.text"></core-format-text></p>\n                                        </ion-col>\n                                        <ion-col>\n                                            <ion-select [id]="row.id" [formControlName]="row.name" [attr.aria-labelledby]="\'addon-mod_lesson-matching-\' + row.id" interface="popover">\n                                                <ion-option *ngFor="let option of row.options" [value]="option.value">{{option.label}}</ion-option>\n                                            </ion-select>\n                                        </ion-col>\n                                    </ion-row>\n                                </ion-grid>\n                            </ion-item>\n                        </ng-container>\n                    </ng-container>\n\n                    <ion-item>\n                        <button ion-button block (click)="submitQuestion()">{{ question.submitLabel }}</button>\n                    </ion-item>\n                </form>\n            </ion-card>\n\n            \x3c!-- Page buttons and progress. --\x3e\n            <ion-list *ngIf="!eolData && !processData">\n                <ion-grid text-wrap *ngIf="pageButtons && pageButtons.length" class="addon-mod_lesson-pagebuttons">\n                    <ion-row align-items-center>\n                        <ion-col *ngFor="let button of pageButtons" col-12 col-md-6 col-lg-3 col-xl>\n                            <a ion-button block outline text-wrap [id]="button.id" (click)="buttonClicked(button.data)">{{ button.content }}</a>\n                        </ion-col>\n                    </ion-row>\n                </ion-grid>\n                <ion-item text-wrap *ngIf="lesson && lesson.progressbar && !canManage && pageData">\n                    <p>{{ \'addon.mod_lesson.progresscompleted\' | translate:{$a: pageData.progress} }}</p>\n                    <core-progress-bar [progress]="pageData.progress"></core-progress-bar>\n                </ion-item>\n                <div class="core-info-card" icon-start *ngIf="lesson && lesson.progressbar && canManage">\n                    <ion-icon name="information-circle"></ion-icon>\n                    {{ \'addon.mod_lesson.progressbarteacherwarning2\' | translate }}\n                </div>\n            </ion-list>\n\n            \x3c!-- End of lesson reached. --\x3e\n            <ion-card *ngIf="eolData && !processData">\n                <div class="core-warning-card" icon-start *ngIf="eolData.offline && eolData.offline.value">\n                    <ion-icon name="warning"></ion-icon>\n                    {{ \'addon.mod_lesson.finishretakeoffline\' | translate }}\n                </div>\n\n                <h3 padding *ngIf="eolData.gradelesson">{{ \'addon.mod_lesson.congratulations\' | translate }}</h3>\n                <ion-item text-wrap *ngIf="eolData.notenoughtimespent">\n                    <core-format-text [text]="eolData.notenoughtimespent.message"></core-format-text>\n                </ion-item>\n                <ion-item text-wrap *ngIf="eolData.numberofpagesviewed">\n                    <core-format-text [text]="eolData.numberofpagesviewed.message"></core-format-text>\n                </ion-item>\n                <ion-item text-wrap *ngIf="eolData.youshouldview">\n                    <core-format-text [text]="eolData.youshouldview.message"></core-format-text>\n                </ion-item>\n                <ion-item text-wrap *ngIf="eolData.numberofcorrectanswers">\n                    <core-format-text [text]="eolData.numberofcorrectanswers.message"></core-format-text>\n                </ion-item>\n                <ion-item text-wrap *ngIf="eolData.displayscorewithessays">\n                    <core-format-text [text]="eolData.displayscorewithessays.message"></core-format-text>\n                </ion-item>\n                <ion-item text-wrap *ngIf="!eolData.displayscorewithessays && eolData.displayscorewithoutessays">\n                    <core-format-text [text]="eolData.displayscorewithoutessays.message"></core-format-text>\n                </ion-item>\n                <ion-item text-wrap *ngIf="eolData.yourcurrentgradeisoutof">\n                    <core-format-text [text]="eolData.yourcurrentgradeisoutof.message"></core-format-text>\n                </ion-item>\n                <ion-item text-wrap *ngIf="eolData.eolstudentoutoftimenoanswers">\n                    <core-format-text [text]="eolData.eolstudentoutoftimenoanswers.message"></core-format-text>\n                </ion-item>\n                <ion-item text-wrap *ngIf="eolData.welldone">\n                    <core-format-text [text]="eolData.welldone.message"></core-format-text>\n                </ion-item>\n                <ion-item text-wrap *ngIf="lesson.progressbar && eolData.progresscompleted">\n                    <p>{{ \'addon.mod_lesson.progresscompleted\' | translate:{$a: eolData.progresscompleted.value} }}</p>\n                    <core-progress-bar [progress]="eolData.progresscompleted.value"></core-progress-bar>\n                </ion-item>\n                <ion-item text-wrap *ngIf="eolData.displayofgrade">\n                    <core-format-text [text]="eolData.displayofgrade.message"></core-format-text>\n                </ion-item>\n                <ion-item text-wrap *ngIf="eolData.reviewlesson">\n                    <a ion-button block (click)="reviewLesson(eolData.reviewlesson.pageid)">\n                        <core-format-text [text]="\'addon.mod_lesson.reviewlesson\' | translate"></core-format-text>\n                    </a>\n                </ion-item>\n                <ion-item text-wrap *ngIf="eolData.modattemptsnoteacher">\n                    <core-format-text [text]="eolData.modattemptsnoteacher.message"></core-format-text>\n                </ion-item>\n                <ion-item text-wrap *ngIf="eolData.activitylink && eolData.activitylink.value">\n                    <ng-container *ngIf="eolData.activitylink.value.formatted">\n                        \x3c!-- Activity link was successfully formatted, render the button. --\x3e\n                        <a ion-button block color="light" [href]="eolData.activitylink.value.href" core-link [capture]="true">\n                            <core-format-text [text]="eolData.activitylink.value.label"></core-format-text>\n                        </a>\n                    </ng-container>\n                    <ng-container *ngIf="!eolData.activitylink.value.formatted">\n                        \x3c!-- Activity link wasn\'t formatted, render the original link. --\x3e\n                        <core-format-text [text]="eolData.activitylink.value.label"></core-format-text>\n                    </ng-container>\n                </ion-item>\n            </ion-card>\n\n            \x3c!-- Feedback returned when processing an action. --\x3e\n            <ion-list *ngIf="processData">\n                <ion-item text-wrap *ngIf="processData.ongoingscore && !processData.reviewmode" >\n                    <core-format-text class="addon-mod_lesson-ongoingscore" [text]="processData.ongoingscore"></core-format-text>\n                </ion-item>\n                <ion-item text-wrap *ngIf="!processData.reviewmode || review">\n                    <p *ngIf="!processData.reviewmode">\n                        <core-format-text [component]="component" [componentId]="lesson.coursemodule" [text]="processData.feedback"></core-format-text>\n                    </p>\n                    <div *ngIf="review">\n                        <p>{{ \'addon.mod_lesson.gotoendoflesson\' | translate }}</p>\n                        <p>{{ \'addon.mod_lesson.or\' | translate }}</p>\n                        <p>{{ \'addon.mod_lesson.continuetonextpage\' | translate }}</p>\n                    </div>\n                </ion-item>\n                <ion-item text-wrap *ngIf="review || (processData.buttons && processData.buttons.length)">\n                    <a ion-button block color="light" *ngIf="review" (click)="changePage(LESSON_EOL)">{{ \'addon.mod_lesson.finish\' | translate }}</a>\n                    <a ion-button block color="light" *ngFor="let button of processData.buttons" (click)="changePage(button.pageId, true)">{{ button.label | translate }}</a>\n                </ion-item>\n            </ion-list>\n        </div>\n    </core-loading>\n</ion-content>\n'}),y("design:paramtypes",[i.r,c.a,a.c,l.a,d.a,m.a,u.a,i.t,p.a,h.a,x.a,w.a,v.a,o.j,i.o,i.q,r.a,g.a,f.a,s.a])],e)}()}});